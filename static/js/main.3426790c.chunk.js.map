{"version":3,"sources":["components/Header/Header.module.css","components/Main/Main.module.css","assets/CamCubeMain.png","components/Content/Content.module.css","components/Header/Header.js","components/Main/Main.js","components/Content/Ziel/Ziel.js","components/Content/Zeitplan/Zeitplan.js","components/Content/Infrastruktur/Infrastruktur.js","components/Content/Geschichte/Geschichte.js","components/Content/CamCube/CamCube.js","components/Content/Content.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","menuElements","menuItems","map","el","onClick","switchComponents","value","text","className","HeaderClasses","header","Main","MainClasses","main","src","MainPicture","alt","Ziel","Zeitplan","Infrastruktur","Geschichte","CamCube","Content","actualComponent","ContentClasses","content","App","state","componentSwitcher","setState","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,KAAO,qB,gBCDzBD,EAAOC,QAAU,IAA0B,yC,gBCC3CD,EAAOC,QAAU,CAAC,QAAU,2B,wMCabC,EAXA,SAACC,GAEZ,IAAMC,EAAeD,EAAME,UAAUC,KAAK,SAAAC,GAAE,OAAI,wBAAIC,QAAS,kBAAML,EAAMM,iBAAiBF,EAAGG,SAASH,EAAGI,SAEzG,OACI,yBAAKC,UAAWC,IAAcC,QACzBV,I,gCCGEW,EARF,WACT,OACI,yBAAKH,UAAWI,IAAYC,MACxB,yBAAKC,IAAKC,IAAaC,IAAI,iC,gBCIxBC,EATF,WACT,OACI,6BACI,sDACA,qCCKGC,EATE,WACb,OACI,6BACI,qDACA,qCCKGC,EATO,WAClB,OACI,6BACI,6CACA,qCCKGC,EATI,WACf,OACI,6BACI,mEACA,qCCKGC,EATC,WACZ,OACI,6BACI,qFACA,qCCcGC,EAZC,SAACvB,GACb,IAAIwB,EAA6C,SAA1BxB,EAAMwB,gBAA4B,kBAAC,EAAD,MAC/B,SAA1BxB,EAAMwB,gBAA4B,kBAAC,EAAD,MACR,UAA1BxB,EAAMwB,gBAA6B,kBAAC,EAAD,MACT,eAA1BxB,EAAMwB,gBAAkC,kBAAC,EAAD,MAAiB,kBAAC,EAAD,MACzD,OACI,yBAAKf,UAAWgB,IAAeC,SAC1BF,ICqBEG,G,kNA5BbC,MAAQ,CACNC,kBAAmB,OACnB3B,UAAW,CACT,CAACM,KAAM,0BAA2BD,MAAO,QACzC,CAACC,KAAM,wBAAyBD,MAAO,QACvC,CAACC,KAAM,UAAWD,MAAO,WACzB,CAACC,KAAM,gBAAiBD,MAAO,SAC/B,CAACC,KAAM,sCAAuCD,MAAO,gB,EAI3DD,iBAAmB,SAACC,GAChB,EAAKuB,SAAS,CACVD,kBAAmBtB,K,uDAKvB,OACE,yBAAKE,UAAU,eACb,kBAAC,EAAD,CAAQH,iBAAkByB,KAAKzB,iBAAkBJ,UAAW6B,KAAKH,MAAM1B,YACvE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASsB,gBAAiBO,KAAKH,MAAMC,yB,GAxB3BG,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3426790c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2xPHV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__gYR4V\"};","module.exports = __webpack_public_path__ + \"static/media/CamCubeMain.1fbbebd6.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__3EhuZ\"};","import React from 'react';\r\nimport HeaderClasses from './Header.module.css';\r\n\r\nconst Header = (props) => {\r\n    \r\n    const menuElements = props.menuItems.map( el => <li onClick={() => props.switchComponents(el.value)}>{el.text}</li>)\r\n    \r\n    return(\r\n        <nav className={HeaderClasses.header}>\r\n            {menuElements}\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport MainClasses from './Main.module.css';\r\nimport MainPicture from '../../assets/CamCubeMain.png'\r\n\r\nconst Main = () => {\r\n    return(\r\n        <div className={MainClasses.main}>\r\n            <img src={MainPicture} alt=\"Here would be main picture\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nconst Ziel = () => {\r\n    return(\r\n        <div>\r\n            <h1>Hauptziel des Projekts</h1>\r\n            <p>text</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Ziel;","import React from 'react';\r\n\r\nconst Zeitplan = () => {\r\n    return(\r\n        <div>\r\n            <h1>Projekt- und Zeitplan</h1>\r\n            <p>text</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Zeitplan;","import React from 'react';\r\n\r\nconst Infrastruktur = () => {\r\n    return(\r\n        <div>\r\n            <h1>Infrastruktur</h1>\r\n            <p>text</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Infrastruktur;","import React from 'react';\r\n\r\nconst Geschichte = () => {\r\n    return(\r\n        <div>\r\n            <h1>Geschichte der Aerosolbeobachtungen</h1>\r\n            <p>text</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Geschichte;","import React from 'react';\r\n\r\nconst CamCube = () => {\r\n    return(\r\n        <div>\r\n            <h1>Welcome to official ressource of the CamCube mission!</h1>\r\n            <p>text</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CamCube;","import React from 'react';\r\nimport ContentClasses from './Content.module.css';\r\nimport Ziel from './Ziel/Ziel';\r\nimport Zeitplan from './Zeitplan/Zeitplan';\r\nimport Infrastruktur from './Infrastruktur/Infrastruktur';\r\nimport Geschichte from './Geschichte/Geschichte';\r\nimport CamCube from './CamCube/CamCube';\r\n\r\nconst Content = (props) => {\r\n    let actualComponent = (props.actualComponent === \"ziel\"? <Ziel /> :\r\n    props.actualComponent === \"plan\"? <Zeitplan /> :\r\n    props.actualComponent === \"infra\"? <Infrastruktur /> :\r\n    props.actualComponent === \"geschichte\"? <Geschichte /> : <CamCube />);\r\n    return(\r\n        <div className={ContentClasses.content}>\r\n            {actualComponent}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Content;","import React from 'react';\nimport Header from './components/Header/Header.js'\nimport Main from './components/Main/Main.js'\nimport Content from './components/Content/Content.js'\nimport './App.css';\n\nclass App extends React.Component {\n\n  state = {\n    componentSwitcher: \"ziel\",\n    menuItems: [\n      {text: \"Hauptziel des Projektes\", value: \"ziel\"},\n      {text: \"Projekt- und Zeitplan\", value: \"plan\"},\n      {text: \"CamCube\", value: \"camcube\"},\n      {text: \"Infrastruktur\", value: \"infra\"},\n      {text: \"Geschichte der Aerosolbeobachtungen\", value: \"geschichte\"}\n    ]\n}\n\nswitchComponents = (value) => {\n    this.setState({\n        componentSwitcher: value\n    })\n}\n\n  render() {\n    return (\n      <div className=\"app-wrapper\">\n        <Header switchComponents={this.switchComponents} menuItems={this.state.menuItems}/>\n        <Main />\n        <Content actualComponent={this.state.componentSwitcher}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}